
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>D3 Test</title>
        <script type="text/javascript" src="http://d3js.org/d3.v3.min.js"></script>
		<style type="text/css">
		.axis path,
    .axis line {
    fill: none;
    stroke: black;
    shape-rendering: crispEdges;
    }

    .axis text {
    font-family: sans-serif;
    font-size: 11px;
    }

     #tooltip {
        position: absolute;
        width: 200px;
        height: auto;
        padding: 10px;
        background-color: white;
        -webkit-border-radius: 10px;
        -moz-border-radius: 10px;
        border-radius: 10px;
        -webkit-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        -moz-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        pointer-events: none;
      }
      
      #tooltip.hidden {
        display: none;
      }
      
      #tooltip p {
        margin: 0;
        font-family: sans-serif;
        font-size: 16px;
        line-height: 20px;
      }


		</style>

    </head>
    <body>

      <div id="content">
      <div id="left" style="width: 50%; float:left">
        <div id="tooltip" class="hidden">
        <p><strong></strong></p>
        <p><span id="value">100</span></p>
        </div>
       </div> 
      <div id="right">
       <p id="Cultural">Click for Avg Cultural Score</p>
       <p id="Technical">Click for Avg Technical Score</p>
      </div>
    <br style="clear:both;"/>
    </div>  



  
        <script type="text/javascript">

  
			var svg = d3.select("#left").append("svg");
			//Width and height
			var w = 600;
			var h = 500;
			var padding = 40;  
      var TimeOfDay =[];
      var DayOfWeek = [];
      var max_score ;
      var min_score ;
      var max_sample_size;
      var score_of_interest ;


   
         window.onload = function()
        {
         //   make_ajax_request("api/scores_by_time_stats", update_ui, null);
        update_Chart_Data('Avg_Technical_Score');
        update_chart(DayTimeMatrix,'Avg_Technical_Score');                

        }


        var days_of_week = {
            'Mon' : 0,
            'Tue' : 1,
            'Wed' : 2,
            'Thu' : 3,
            'Fri' : 4,
            'Sat' : 5,
            'Sun' : 6
        }
    
        function parseIntOrLeaveString(stringValue)
        {
            var result = parseInt(stringValue);
            if (isNaN(result))
            {
                result = stringValue;
            }
            return result;
        }

        function get_keys(dict)
        {
            var keys = [];
            for(var k in dict) keys.push(parseIntOrLeaveString(k));
            return keys;
        }
		
        var DayTimeMatrix=[{"Avg_Cultural_Score": 3.0, "Sample_Size": 3, "Avg_Technical_Score": 3.125, "Day": "Mon", "Hour": 11}, {"Avg_Cultural_Score": 2.25, "Sample_Size": 7, "Avg_Technical_Score": 1.75, "Day": "Mon", "Hour": 12}, {"Avg_Cultural_Score": 3.25, "Sample_Size": 5, "Avg_Technical_Score": 2.33333333333333, "Day": "Mon", "Hour": 13}, {"Avg_Cultural_Score": 2.20833333333333, "Sample_Size": 6, "Avg_Technical_Score": 2.29166666666667, "Day": "Mon", "Hour": 14}, {"Avg_Cultural_Score": 2.875, "Sample_Size": 5, "Avg_Technical_Score": 2.0, "Day": "Mon", "Hour": 15}, {"Avg_Cultural_Score": 2.5, "Sample_Size": 3, "Avg_Technical_Score": 2.375, "Day": "Mon", "Hour": 16}, {"Avg_Cultural_Score": 4.0, "Sample_Size": 3, "Avg_Technical_Score": 4.0, "Day": "Mon", "Hour": 17}, {"Avg_Cultural_Score": 3.25, "Sample_Size": 1, "Avg_Technical_Score": 4.0, "Day": "Tue", "Hour": 13}, {"Avg_Cultural_Score": 2.875, "Sample_Size": 8, "Avg_Technical_Score": 2.53125, "Day": "Tue", "Hour": 14}, {"Avg_Cultural_Score": 2.82692307692308, "Sample_Size": 15, "Avg_Technical_Score": 2.28571428571429, "Day": "Tue", "Hour": 15}, {"Avg_Cultural_Score": 3.19444444444444, "Sample_Size": 10, "Avg_Technical_Score": 2.90625, "Day": "Tue", "Hour": 16}, {"Avg_Cultural_Score": 2.82142857142857, "Sample_Size": 8, "Avg_Technical_Score": 3.0, "Day": "Tue", "Hour": 17}, {"Avg_Cultural_Score": 3.0, "Sample_Size": 1, "Avg_Technical_Score": 2.0, "Day": "Tue", "Hour": 18}, {"Avg_Cultural_Score": null, "Sample_Size": 1, "Avg_Technical_Score": null, "Day": "Wed", "Hour": 10}, {"Avg_Cultural_Score": 2.66666666666667, "Sample_Size": 4, "Avg_Technical_Score": 2.66666666666667, "Day": "Wed", "Hour": 11}, {"Avg_Cultural_Score": 2.3125, "Sample_Size": 4, "Avg_Technical_Score": 2.125, "Day": "Wed", "Hour": 12}, {"Avg_Cultural_Score": 2.35, "Sample_Size": 5, "Avg_Technical_Score": 2.9, "Day": "Wed", "Hour": 13}, {"Avg_Cultural_Score": 2.5, "Sample_Size": 7, "Avg_Technical_Score": 2.79166666666667, "Day": "Wed", "Hour": 14}, {"Avg_Cultural_Score": 2.6875, "Sample_Size": 4, "Avg_Technical_Score": 2.875, "Day": "Wed", "Hour": 15}, {"Avg_Cultural_Score": 2.66666666666667, "Sample_Size": 4, "Avg_Technical_Score": 2.66666666666667, "Day": "Wed", "Hour": 16}, {"Avg_Cultural_Score": 3.0, "Sample_Size": 4, "Avg_Technical_Score": 2.6875, "Day": "Wed", "Hour": 17}, {"Avg_Cultural_Score": 3.0, "Sample_Size": 1, "Avg_Technical_Score": 4.0, "Day": "Thu", "Hour": 10}, {"Avg_Cultural_Score": 2.5, "Sample_Size": 2, "Avg_Technical_Score": 2.375, "Day": "Thu", "Hour": 11}, {"Avg_Cultural_Score": 3.0, "Sample_Size": 1, "Avg_Technical_Score": 1.0, "Day": "Thu", "Hour": 12}, {"Avg_Cultural_Score": 2.0, "Sample_Size": 1, "Avg_Technical_Score": 2.0, "Day": "Thu", "Hour": 14}, {"Avg_Cultural_Score": 2.5, "Sample_Size": 2, "Avg_Technical_Score": 2.0, "Day": "Thu", "Hour": 15}, {"Avg_Cultural_Score": null, "Sample_Size": 1, "Avg_Technical_Score": null, "Day": "Fri", "Hour": 10}, {"Avg_Cultural_Score": 3.25, "Sample_Size": 6, "Avg_Technical_Score": 3.5, "Day": "Fri", "Hour": 11}, {"Avg_Cultural_Score": 3.16666666666667, "Sample_Size": 6, "Avg_Technical_Score": 2.9375, "Day": "Fri", "Hour": 12}, {"Avg_Cultural_Score": 2.53125, "Sample_Size": 9, "Avg_Technical_Score": 2.3125, "Day": "Fri", "Hour": 13}, {"Avg_Cultural_Score": 2.71428571428571, "Sample_Size": 10, "Avg_Technical_Score": 2.82142857142857, "Day": "Fri", "Hour": 14}, {"Avg_Cultural_Score": 3.02272727272727, "Sample_Size": 12, "Avg_Technical_Score": 2.65, "Day": "Fri", "Hour": 15}, {"Avg_Cultural_Score": 2.78125, "Sample_Size": 9, "Avg_Technical_Score": 2.64285714285714, "Day": "Fri", "Hour": 16}, {"Avg_Cultural_Score": 2.6, "Sample_Size": 6, "Avg_Technical_Score": 2.8, "Day": "Fri", "Hour": 17}];

  

        function update_Chart_Data(selected_score_of_interest)
        {
             max_score = -1;
             min_score = Number.MAX_VALUE;
             max_sample_size=0;
            score_of_interest=selected_score_of_interest;
            var times_of_day_dict = {};
            var days_of_week_dict = {};
            for (var i = 0; i < DayTimeMatrix.length; i++)
            {
                times_of_day_dict[DayTimeMatrix[i].Hour] = true;
                days_of_week_dict[DayTimeMatrix[i].Day] = true;
                if (DayTimeMatrix[i][score_of_interest] === null)
                    continue;
                if (DayTimeMatrix[i][score_of_interest] < min_score)
                {
                    min_score = DayTimeMatrix[i][score_of_interest];
                }
                else if(DayTimeMatrix[i][score_of_interest] > max_score)
                {
                    max_score = DayTimeMatrix[i][score_of_interest];
                }
                if (DayTimeMatrix[i]["Sample_Size"] > max_sample_size)
                {
                  max_sample_size=DayTimeMatrix[i]["Sample_Size"];
                }
            }
            TimeOfDay = get_keys(times_of_day_dict);
            TimeOfDay.sort(function(a, b)
            {
                return a - b;
            });
            DayOfWeek = get_keys(days_of_week_dict);
            DayOfWeek.sort(function(a, b)
            {
                return days_of_week[a] - days_of_week[b];
            });
          };  
 				

				
 

    d3.selectAll("p")
            .on("click", function() { 

            //See which p was clicked
          var paragraphID = d3.select(this).attr("id");
          
          //Decide what to do next
          if (paragraphID == "Cultural") {
            update_Chart_Data('Avg_Cultural_Score')  
            update_chart(DayTimeMatrix,'Avg_Cultural_Score')      
            
          } 
          if(paragraphID == "Technical") {
            update_Chart_Data('Avg_Technical_Score')
            update_chart(DayTimeMatrix,'Avg_Technical_Score') 
                  
          }        
          if(paragraphID == "All") {
            update_Chart_Data('Avg_Cultural_Score')
            update_chart(DayTimeMatrix,'Avg_Cultural_Score')   
            }
            });


    function update_chart(DayTimeMatrix,score_of_interest){


   //Figure out Scales

      var yScale = d3.scale.ordinal()
                   .domain(d3.range(TimeOfDay.length))
                  .rangeRoundBands([padding, w - padding * 2],0.05);
             
      var xScale = d3.scale.ordinal()
                 .domain(d3.range(DayOfWeek.length))
                 .rangeRoundBands([padding, h - padding],0.05);
    
       

      var yTickScale =d3.scale.ordinal() 
                      .domain(d3.range(TimeOfDay.length)) 
                      .rangeRoundBands([padding, w - padding * 2]);
     
      var xTickScale =d3.scale.ordinal() 
                      .domain(d3.range(DayOfWeek.length)) 
                      .rangeRoundBands([padding, h - padding]);
     
     
     //  Draw Axis

        
       var xAxis = d3.svg.axis()
                  .scale(xTickScale)
                  .orient("top")
                  .tickValues(DayOfWeek);

        var yAxis = d3.svg.axis()
                  .scale(yTickScale)
                  .orient("left")
                  .tickValues(TimeOfDay);
              
        svg.append("g")
          .attr("class", "axis")
          .attr("transform", "translate(0," + padding + ")")
          .call(xAxis);     
 

        svg.append("g")
         .attr("class", "axis")
         .attr("transform", "translate(" + padding + ",0)")
         .call(yAxis);                  


   // Add bars

      var bars = svg.selectAll("rect")
                    .data(DayTimeMatrix);
 

      bars
         .enter()
         .append("rect")
         .transition()

         .attr("y", function(d, i) {
            return yScale(TimeOfDay.indexOf(d.Hour));         
         })
         .attr("x", function(d, i) {
           return xScale(DayOfWeek.indexOf(d.Day));  
          })         
         .attr("rx",10)
         .attr("ry",10)
         .attr("width", xScale.rangeBand())
         .attr("height", yScale.rangeBand())
         .style("fill-opacity",function(d) {return (d["Sample_Size"] / max_sample_size); })
         .style("fill", function(d) {
            if (d[score_of_interest] === null)
            {
                return "rgba(0, 0, 0, 0)";
            }
            var color_offset = Math.round(((d[score_of_interest] - min_score)/(max_score - min_score)) * 255);
        
            var ret_value = "rgb(" + (255 - color_offset).toString()
                          + ","+(0 + color_offset).toString()
                          + ", 0"
                          + ")";
            return ret_value;
        });

        bars
         .on("mouseover", function(d) {

          //Get this bar's x/y values, then augment for the tooltip
          var xPosition = parseFloat(d3.select(this).attr("x")) + xScale.rangeBand() / 2;
          var yPosition = parseFloat(d3.select(this).attr("y")) / 2 + w / 2;

          //Update the tooltip position and value
          d3.select("#tooltip")
            .style("left", xPosition + "px")
            .style("top", yPosition + "px")           
            .select("#value")
            .text(score_of_interest+" : "+d[score_of_interest].toFixed(1)+' sample size '+d["Sample_Size"]);
         

         console.log (d["Sample_Size"])
         console.log (d["Sample_Size"]/max_sample_size)

          //Show the tooltip
          d3.select("#tooltip").classed("hidden", false);

         })
         .on("mouseout", function() {
         
          //Hide the tooltip
          d3.select("#tooltip").classed("hidden", true);
          
         });
 
       bars.exit().remove(); 

       //On update  change color

       bars
        .style("fill", function(d) {
            if (d[score_of_interest] === null)
            {
                return "rgba(0, 0, 0, 0)";
            }
            var color_offset = Math.round(((d[score_of_interest] - min_score)/(max_score - min_score)) * 255);
        
            var ret_value = "rgb(" + (255 - color_offset).toString()
                          + ","+(0 + color_offset).toString()
                          + ", 0"
                          + ")";
            return ret_value;
        });

        }       

        </script>

 </div>


    </body>
</html>   
