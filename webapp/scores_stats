
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>Onsite Interviews</title>
      	<script type="text/javascript" src="js/ajax.js"></script>
        <script type="text/javascript" src="http://d3js.org/d3.v3.min.js"></script>
	<style type="text/css">
		
	.axis path,
   	.axis line {
    		fill: none;
   		stroke: black;
    		shape-rendering: crispEdges;
    		}

    	.axis text {
    		font-family: sans-serif;
    		font-size: 11px;
    		}

    	 #tooltip {
        	position: absolute;
       		width: 200px;
        	height: auto;
        	padding: 10px;
        	background-color: white;
        	-webkit-border-radius: 10px;
        	-moz-border-radius: 10px;
        	border-radius: 10px;
        	-webkit-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        	-moz-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        	box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        	pointer-events: none;
      		}
      
     	 #tooltip.hidden {
       		 display: none;
     		 }
      
     	 #tooltip p {
        	margin: 0;
        	font-family: sans-serif;
        	font-size: 16px;
        	line-height: 20px;
     		 }


	</style>

    </head>
    <body>

      <div id="content">
      <div id="left" style="width: 50%; float:left">
        <div id="tooltip" class="hidden">
        <p><strong></strong></p>
        <p><span id="value">100</span></p>
        </div>
       </div> 
      <div id="right">
       <p id="Cultural">Click for Avg Cultural Score</p>
       <p id="Technical">Click for Avg Technical Score</p>
      </div>
    <br style="clear:both;"/>
    </div>  


        <script type="text/javascript">

  
	var svg = d3.select("#left").append("svg");
			
	var w = 600;
	var h = 500;
	var padding = 40;  
      	
	var TimeOfDay =[];
      	var DayOfWeek = [];
      	var DayTimeMatrix=[];
      	var max_score ;
      	var min_score ;
      	var max_sample_size;
      	var score_of_interest ;
	
	var days_of_week = {
            'Mon' : 0,
            'Tue' : 1,
            'Wed' : 2,
            'Thu' : 3,
            'Fri' : 4,
            'Sat' : 5,
            'Sun' : 6
        }
 

   
         window.onload = function()
	{
        	 make_ajax_request("api/scores_by_time_stats",update_DayTimeMatrix,  null);
         }

	function update_DayTimeMatrix(ajaxResult)
	{
		DayTimeMatrix=ajaxResult;
       		update_Chart_Data("Avg_Technical_Score");
        	update_chart("Avg_Technical_Score");                
         };


       
        function parseIntOrLeaveString(stringValue)
        {
            var result = parseInt(stringValue);
            if (isNaN(result))
            {
                result = stringValue;
            }
            return result;
        }

        function get_keys(dict)
        {
            var keys = [];
            for(var k in dict) keys.push(parseIntOrLeaveString(k));
            return keys;
        }
		
   

        function update_Chart_Data(selected_score_of_interest)
        {
            max_score = -1;
            min_score = Number.MAX_VALUE;
            max_sample_size=0;
            score_of_interest=selected_score_of_interest;
            var times_of_day_dict = {};
            var days_of_week_dict = {};
            for (var i = 0; i < DayTimeMatrix.length; i++)
            {
                times_of_day_dict[DayTimeMatrix[i].Hour] = true;
                days_of_week_dict[DayTimeMatrix[i].Day] = true;
                if (DayTimeMatrix[i][score_of_interest] === null)
                    continue;
                if (DayTimeMatrix[i][score_of_interest] < min_score)
                {
                    min_score = DayTimeMatrix[i][score_of_interest];
                }
                else if(DayTimeMatrix[i][score_of_interest] > max_score)
                {
                    max_score = DayTimeMatrix[i][score_of_interest];
                }
                if (DayTimeMatrix[i]["Sample_Size"] > max_sample_size)
                {
                  max_sample_size=DayTimeMatrix[i]["Sample_Size"];
                }
            }
            TimeOfDay = get_keys(times_of_day_dict);
            TimeOfDay.sort(function(a, b)
            {
                return a - b;
            });
            DayOfWeek = get_keys(days_of_week_dict);
            DayOfWeek.sort(function(a, b)
            {
                return days_of_week[a] - days_of_week[b];
            });
          };  
 				

				
 

   	 d3.selectAll("p")
            .on("click", function() 
		{ 
         		var paragraphID = d3.select(this).attr("id");
         		if (paragraphID == "Cultural")
			{
          			update_Chart_Data("Avg_Cultural_Score")  
               			update_chart("Avg_Cultural_Score")      
			} 
         		if(paragraphID == "Technical") 
			{
            		update_Chart_Data("Avg_Technical_Score")
            		update_chart("Avg_Technical_Score") 
                	}
		});        

    	
	function update_chart(score_of_interest)
	{

		var yScale = d3.scale.ordinal().domain(d3.range(TimeOfDay.length)).rangeRoundBands([padding, w - padding * 2],0.05);
		var xScale = d3.scale.ordinal().domain(d3.range(DayOfWeek.length)).rangeRoundBands([padding, h - padding],0.05); 
     		//var xScale = d3.scale.ordinal().domain(d3.range(DayOfWeek.length).rangeRoundBands([padding, h - padding],0.05);
       		var yTickScale = d3.scale.ordinal().domain(d3.range(TimeOfDay.length)).rangeRoundBands([padding, w - padding * 2]);
      		var xTickScale =d3.scale.ordinal() .domain(d3.range(DayOfWeek.length)).rangeRoundBands([padding, h - padding]);
     
     		//  Draw Axis
        
       		var xAxis = d3.svg.axis().scale(xTickScale).orient("top").tickValues(DayOfWeek);
        	var yAxis = d3.svg.axis().scale(yTickScale).orient("left").tickValues(TimeOfDay);
      		svg.append("g").attr("class", "axis").attr("transform", "translate(0," + padding + ")").call(xAxis);     
        	svg.append("g").attr("class", "axis").attr("transform", "translate(" + padding + ",0)").call(yAxis);                  

  		 // Add bars

    		var bars = svg.selectAll("rect").data(DayTimeMatrix);
      		bars
         	.enter()
         	.append("rect")
         	.transition(100)
        	.attr("y", function(d, i) {return yScale(TimeOfDay.indexOf(d.Hour));})
         	.attr("x", function(d, i) {return xScale(DayOfWeek.indexOf(d.Day));})         
         	.attr("rx",10)
         	.attr("ry",10)
         	.attr("width", xScale.rangeBand())
         	.attr("height", yScale.rangeBand())
          	.style("fill-opacity",function(d) {return (d["Sample_Size"] / max_sample_size)+ 0.3; })
 		.style("fill", function(d) {
            	if (d[score_of_interest] === null)
            	{
                return "rgba(0, 0, 0, 0)";
            	}
            	var color_offset = Math.round(((d[score_of_interest] - min_score)/(max_score - min_score)) * 255);
       		//console.log(d);	 
            	var ret_value = "rgb(" + (255 - color_offset).toString()
                          + ","+(0 + color_offset).toString()
                          + ", 0"
                          + ")";
            	return ret_value;
        	});

        	bars
         	.on("mouseover", function(d) {

          	//Get this bar's x/y values, then augment for the tooltip
          	var xPosition = parseFloat(d3.select(this).attr("x")) + xScale.rangeBand() / 2;
          	var yPosition = parseFloat(d3.select(this).attr("y")) / 2 + w / 2;

          	//Update the tooltip position and value
          	d3.select("#tooltip")
            	.style("left", xPosition + "px")
            	.style("top", yPosition + "px")           
            	.select("#value")
            	.text(score_of_interest+" : "+d[score_of_interest].toFixed(1)+' sample size '+d["Sample_Size"]);
         

        	// console.log (d["Sample_Size"])
         	//console.log (d["Sample_Size"]/max_sample_size)

          	//Show the tooltip
          	d3.select("#tooltip").classed("hidden", false);

         	})
         	.on("mouseout", function() {
         
          	//Hide the tooltip
          	d3.select("#tooltip").classed("hidden", true);
          
         	});
 
       		bars.exit().remove(); 

       		//On update  change color

       		bars
        	.transition(100)
		.style("fill", function(d) {
            	if (d[score_of_interest] === null)
            	{
                return "rgba(0, 0, 0, 0)";
            	}
            	var color_offset = Math.round(((d[score_of_interest] - min_score)/(max_score - min_score)) * 255);
        
            	var ret_value = "rgb(" + (255 - color_offset).toString()
                          + ","+(0 + color_offset).toString()
                          + ", 0"
                          + ")";
            	return ret_value;
        	});

        }  

               

        </script>

	</div>


    </body>
</html>   
