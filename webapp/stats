<HTML>
	<HEAD>
		<TITLE>Onsite Interviews</TITLE>
		<META http-equiv="Content-type" value="text/html; charset=utf-8">
        <META name="viewport" content="width=device-width, initial-scale = 1.0, maximum-scale = 1, user-scalable = no">
        <META name="apple-mobile-web-app-capable" content="yes">
		<LINK href="css/onsite_inflight.css" type="text/css" rel="stylesheet">
        <SCRIPT type="text/javascript">
            var labels_height_proportion = .025;
            var horizontal_padding_proportion = .1;
            var total_buckets = null;
            var filtered_buckets = null;
            var total_interviewers = null;
            var max_y_value = -1;
            var selected_interviewers = {};

            window.onload = function()
            {
                make_ajax_request("/api/time_to_respond_stats", update_totals_data, null);
            }

            function update_totals_data(data)
            {
                total_buckets = data['buckets'];
                filtered_buckets = clone(total_buckets);
                total_interviewers = data['interviewers'];
                update_chart(null);
                update_interviewer_list(total_interviewers);
            }

            function get_total_num_interviews_in_bucket(bucket)
            {
                var total_in_bucket = 0;
                for (var interviewer_email in bucket['interviews'])
                {
                    total_in_bucket += bucket['interviews'][interviewer_email].length;
                }
                return total_in_bucket;
            }

            function get_max_y_value(overlay_buckets)
            {
                if (max_y_value == -1)
                {
                    var num_bars = filtered_buckets.length;
                    for (var i = 0; i < num_bars; i++)
                    {
                        var total_in_bucket = get_total_num_interviews_in_bucket(filtered_buckets[i]);
                        if (max_y_value < total_in_bucket)
                            max_y_value = total_in_bucket;
                    }
                    if (overlay_buckets != null)
                    {
                        for (var i = 0; i < overlay_buckets.length; i++)
                        {
                            var total_in_bucket = get_total_num_interviews_in_bucket(overlay_buckets[i]);
                            if (max_y_value < total_in_bucket)
                                max_y_value = total_in_bucket;
                        }
                    }
                }
                return max_y_value;
            }

            function apply_chart_transforms(object_to_transform, overlay_buckets)
            {
                var bar_chart = d3.select('#bar-chart');
                var total_chart_height = bar_chart[0][0].viewBox.baseVal.height*(1-labels_height_proportion);
                var total_chart_width = bar_chart[0][0].viewBox.baseVal.width;
                var num_bars = total_buckets.length;
                var width_space_per_bar = total_chart_width/num_bars;
                var bucket_height_callback = function(bucket)
                {
                    return total_chart_height*(get_total_num_interviews_in_bucket(bucket)/get_max_y_value(overlay_buckets));
                }
                return object_to_transform.
                    attr('x', function (data, index)
                    {
                        return (index + (horizontal_padding_proportion/2)) * width_space_per_bar;
                    }).
                    attr('y', function (data)
                    {
                        return total_chart_height - bucket_height_callback(data);
                    }).
                    attr('width', (1 - horizontal_padding_proportion)*width_space_per_bar).
                    attr('height', function (data, index)
                    {
                        return bucket_height_callback(data);
                    });
            }

            function apply_chart_labels_transforms(object_to_transform)
            {
                var bar_chart = d3.select('#bar-chart');
                var total_chart_height = bar_chart[0][0].viewBox.baseVal.height;
                var total_chart_width = bar_chart[0][0].viewBox.baseVal.width;
                var num_bars = total_buckets.length;
                var width_space_per_bar = total_chart_width/num_bars;
                return object_to_transform.
                    attr('x', function (data, index)
                    {
                        return (index+0.5) * width_space_per_bar;
                    }).
                    attr('y', total_chart_height).
                    attr('height', total_chart_height * labels_height_proportion).
                    style('opacity', 1.0).
                    text(function (d)
                    {
                        if (d['range'] == 'other')
                            return 'other';
                        return d['range'][0] + "-" + d['range'][1];
                    });
            }

            function clone(obj)
            {
                return JSON.parse(JSON.stringify(obj));
            }

            function take_down_chart_overlay()
            {
                var blank_buckets = [];
                for (var i = 0; i < total_buckets.length; i++)
                {
                    var blank_bucket = clone(total_buckets[i]);
                    blank_bucket['interviews'] = {};
                    blank_buckets.push(blank_bucket);
                }
                update_chart(blank_buckets);
            }

            function update_chart(data_to_reflect)
            {
                if (data_to_reflect == null)
                {
                    data_to_reflect = filtered_buckets;
                    as_overlay = false;
                }
                else
                {
                    as_overlay = true;
                }
                var chart_selection= d3.selectAll('#bar-chart');
                var total_chart_height = d3.select('#bar-chart')[0][0].viewBox.baseVal.height;
                var rect_class_name = 'base';
                if (as_overlay)
                {
                    rect_class_name = 'overlay';
                }
                var rect = chart_selection.selectAll('.' + rect_class_name).data(data_to_reflect);
                var enter_transition_duration = 1000;
                apply_chart_transforms(rect.transition(), (as_overlay)? data_to_reflect : null);
                apply_chart_transforms(
                    rect.enter().append('rect').
                        attr('y', total_chart_height*(1 - labels_height_proportion)).
                        attr('height', "0").
                        classed(rect_class_name, true).
                        on('mouseover', function (data)
                        {
                            d3.select(this).style('opacity', 1.0);
                            var interviews = data['interviews'];
                            var interviewers_to_list = [];
                            for (var i = 0; i < total_interviewers.length; i++)
                            {
                                var interviewer_info = total_interviewers[i];
                                if (interviews[interviewer_info['email']] != null)
                                {
                                    interviewers_to_list.push(interviewer_info);
                                }
                            }
                            update_interviewer_list(interviewers_to_list);
                        }).
                        on('mouseout', function (data)
                        {
                            d3.select(this).style('opacity', 0.5);
                            update_interviewer_list(total_interviewers);
                        }).
                        transition(), (as_overlay)? data_to_reflect : null).
                    duration(enter_transition_duration);
                rect.exit().remove();

                if (!as_overlay)
                {
                    var labels = chart_selection.selectAll('text').data(data_to_reflect);
                    apply_chart_labels_transforms(labels.transition());
                    apply_chart_labels_transforms(labels.enter().append('text').style('opacity', 0.0).transition()).duration(enter_transition_duration);
                    labels.exit().remove();
                }
            }

            function apply_interviewer_table_transforms(object_to_transform)
            {
                return object_to_transform.classed('selected', function (data)
                {
                    return selected_interviewers[data['email']];
                }).classed('tableview-cell', true)
                  .text(function (data)
                {
                    return data['name'];
                });
            }

            function compile_filtered_buckets()
            {
                max_y_value = -1;
                filtered_buckets = [];
                if (Object.keys(selected_interviewers).length === 0)
                {
                    filtered_buckets = total_buckets;
                }
                else
                {
                    for (var i = 0; i < total_buckets.length; i++)
                    {
                        var filtered_bucket = clone(total_buckets[i]);
                        for (var email in filtered_bucket['interviews'])
                        {
                            if (selected_interviewers[email] == null)
                            {
                                delete filtered_bucket['interviews'][email];
                            }
                        }
                        filtered_buckets.push(filtered_bucket);
                    }
                }
            }

            function update_interviewer_list(data_to_reflect)
            {
                var interviewer_container = d3.selectAll('#interviewer-tableview').selectAll('div').data(data_to_reflect);
                apply_interviewer_table_transforms(interviewer_container);
                apply_interviewer_table_transforms(interviewer_container.enter().append('div').on('mouseover', function(data)
                {
                    var interviewer_email = data['email']
                    if (Object.keys(selected_interviewers).length === 0 || selected_interviewers[interviewer_email] === true)
                    {
                        var overlay_data = [];
                        for (var i = 0; i < total_buckets.length; i++)
                        {
                            var bucket = total_buckets[i];
                            var new_bucket_dict = {'range' : bucket['range'], 'interviews' : {}};
                            if (bucket['interviews'][interviewer_email] != null)
                            {
                                new_bucket_dict['interviews'][interviewer_email] = bucket['interviews'][interviewer_email];
                            }
                            overlay_data.push(new_bucket_dict);
                        }
                        update_chart(overlay_data);
                    }
                }).on('mouseout', take_down_chart_overlay)
                  .on('click', function (data)
                {
                    var cell = d3.select(this);
                    var need_to_add = !cell.classed('selected');
                    cell.classed('selected', need_to_add);
                    if (need_to_add)
                    {
                        selected_interviewers[data['email']] = true;
                    }
                    else
                    {
                        delete selected_interviewers[data['email']];
                    }
                    take_down_chart_overlay();
                    compile_filtered_buckets();
                    update_chart(null);
                }));
                interviewer_container.exit().remove();
            }

        </SCRIPT>
        <SCRIPT type="text/javascript" src="js/ajax.js"></SCRIPT>
        <SCRIPT src="http://d3js.org/d3.v3.min.js" charset="utf-8"></SCRIPT>
        <LINK rel="stylesheet" media="all" href="/css/stats.css"></LINK>
	</HEAD>
	<BODY>
        <DIV id="left-pane">
            <SVG id="bar-chart" width="100%" height="100%" viewBox="0 0 592 492"></SVG>
        </DIV>
        <DIV id="interviewer-container"><DIV id="interviewer-tableview" class="tableview" style="height: 100%"></DIV></DIV>
	</BODY>
</HTML>
